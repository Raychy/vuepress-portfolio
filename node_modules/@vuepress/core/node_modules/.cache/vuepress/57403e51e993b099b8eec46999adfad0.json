{"remainingRequest":"C:\\Users\\racheal\\Documents\\vuepress-starter\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!C:\\Users\\racheal\\Documents\\vuepress-starter\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\racheal\\Documents\\vuepress-starter\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\racheal\\Documents\\vuepress-starter\\node_modules\\vuepress-plugin-social-share\\lib\\components\\SocialShare.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\racheal\\Documents\\vuepress-starter\\node_modules\\vuepress-plugin-social-share\\lib\\components\\SocialShare.vue","mtime":499162500000},{"path":"C:\\Users\\racheal\\Documents\\vuepress-starter\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\racheal\\Documents\\vuepress-starter\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\racheal\\Documents\\vuepress-starter\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\racheal\\Documents\\vuepress-starter\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}